# Generated by Django 5.2.5 on 2025-08-20 14:51

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('User', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='LocalEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='행사 제목')),
                ('content', models.TextField(verbose_name='행사 내용')),
                ('event_start_date', models.DateTimeField(verbose_name='행사 시작일')),
                ('event_end_date', models.DateTimeField(verbose_name='행사 종료일')),
                ('event_location', models.CharField(max_length=200, verbose_name='행사 장소')),
                ('event_address', models.CharField(max_length=300, verbose_name='행사 주소')),
                ('event_fee', models.CharField(default='무료', max_length=100, verbose_name='참가비')),
                ('event_capacity', models.IntegerField(blank=True, null=True, verbose_name='참가 인원')),
                ('event_contact', models.CharField(blank=True, max_length=100, verbose_name='연락처')),
                ('event_website', models.URLField(blank=True, verbose_name='행사 웹사이트')),
                ('event_image', models.URLField(blank=True, verbose_name='행사 이미지')),
                ('event_banner', models.URLField(blank=True, verbose_name='행사 배너')),
                ('source', models.CharField(max_length=100, verbose_name='데이터 출처')),
                ('source_id', models.CharField(blank=True, max_length=100, verbose_name='원본 ID')),
                ('api_data', models.JSONField(default=dict, verbose_name='API 원본 데이터')),
                ('view_count', models.IntegerField(default=0, verbose_name='조회수')),
                ('like_count', models.IntegerField(default=0, verbose_name='좋아요 수')),
                ('comment_count', models.IntegerField(default=0, verbose_name='댓글 수')),
                ('interest_count', models.IntegerField(default=0, verbose_name='관심 표시 수')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('is_featured', models.BooleanField(default=False, verbose_name='추천 행사')),
                ('is_free', models.BooleanField(default=True, verbose_name='무료 행사 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='생성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('published_at', models.DateTimeField(blank=True, null=True, verbose_name='발행일')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.category', verbose_name='카테고리')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.location', verbose_name='지역')),
                ('subcategory', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='User.subcategory', verbose_name='서브카테고리')),
            ],
            options={
                'verbose_name': '지역행사',
                'verbose_name_plural': '지역행사',
                'db_table': 'local_events',
                'ordering': ['-event_start_date', '-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LocalEventComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='댓글 내용')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Board.localevent', verbose_name='행사')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='Board.localeventcomment', verbose_name='부모 댓글')),
            ],
            options={
                'verbose_name': '지역행사 댓글',
                'verbose_name_plural': '지역행사 댓글',
                'db_table': 'local_event_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LocalEventInterest',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('interest_type', models.CharField(choices=[('attend', '참가 예정'), ('maybe', '참가 고려'), ('share', '공유'), ('reminder', '알림 설정')], default='attend', max_length=20, verbose_name='관심 유형')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='관심 표시 시간')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='interests', to='Board.localevent', verbose_name='행사')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '지역행사 관심',
                'verbose_name_plural': '지역행사 관심',
                'db_table': 'local_event_interests',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='LocalEventLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='좋아요 시간')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='Board.localevent', verbose_name='행사')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '지역행사 좋아요',
                'verbose_name_plural': '지역행사 좋아요',
                'db_table': 'local_event_likes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='NewsSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.CharField(choices=[('notice', '공지사항'), ('news', '뉴스'), ('event', '행사'), ('culture', '문화'), ('sports', '체육'), ('education', '교육'), ('welfare', '복지'), ('transport', '교통'), ('environment', '환경'), ('other', '기타')], max_length=20, verbose_name='카테고리')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='구독일')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscribers', to='User.location', verbose_name='지역')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='news_subscriptions', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '뉴스 구독',
                'verbose_name_plural': '뉴스 구독들',
            },
        ),
        migrations.CreateModel(
            name='PublicDataNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='제목')),
                ('content', models.TextField(verbose_name='내용')),
                ('category', models.CharField(choices=[('natural_disaster', '자연재해'), ('accident', '사고'), ('traffic', '교통'), ('security', '치안'), ('facility', '시설 고장'), ('other', '기타')], max_length=20, verbose_name='카테고리')),
                ('alert_type', models.CharField(choices=[('emergency', '긴급'), ('warning', '주의'), ('info', '안내')], default='info', max_length=20, verbose_name='알림 유형')),
                ('sender', models.CharField(max_length=100, verbose_name='발송 기관')),
                ('sender_contact', models.CharField(blank=True, max_length=100, verbose_name='연락처')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('is_broadcast', models.BooleanField(default=False, verbose_name='전체 발송')),
                ('priority', models.IntegerField(default=1, verbose_name='우선순위')),
                ('sent_at', models.DateTimeField(auto_now_add=True, verbose_name='발송일')),
                ('expires_at', models.DateTimeField(blank=True, null=True, verbose_name='만료일')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.location', verbose_name='대상 지역')),
            ],
            options={
                'verbose_name': '공공 데이터 소식',
                'verbose_name_plural': '공공 데이터 소식',
                'db_table': 'public_data_news',
                'ordering': ['-sent_at'],
            },
        ),
        migrations.CreateModel(
            name='PublicDataNewsRead',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('read_at', models.DateTimeField(auto_now_add=True, verbose_name='읽은 시간')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reads', to='Board.publicdatanews', verbose_name='공공 데이터 소식')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '공공 데이터 소식 읽음',
                'verbose_name_plural': '공공 데이터 소식 읽음',
                'db_table': 'public_data_news_reads',
                'ordering': ['-read_at'],
            },
        ),
        migrations.CreateModel(
            name='PublicNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=500, verbose_name='제목')),
                ('content', models.TextField(verbose_name='내용')),
                ('summary', models.TextField(blank=True, verbose_name='요약')),
                ('source', models.CharField(choices=[('seoul', '서울시'), ('district', '구청'), ('data_go_kr', '공공데이터포털'), ('other', '기타')], max_length=20, verbose_name='출처')),
                ('source_name', models.CharField(max_length=100, verbose_name='출처명')),
                ('original_url', models.URLField(blank=True, verbose_name='원본 URL')),
                ('external_id', models.CharField(blank=True, max_length=100, verbose_name='외부 ID')),
                ('category', models.CharField(choices=[('notice', '공지사항'), ('news', '뉴스'), ('event', '행사'), ('culture', '문화'), ('sports', '체육'), ('education', '교육'), ('welfare', '복지'), ('transport', '교통'), ('environment', '환경'), ('other', '기타')], max_length=20, verbose_name='카테고리')),
                ('published_at', models.DateTimeField(verbose_name='발행일')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='수집일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('is_important', models.BooleanField(default=False, verbose_name='중요 여부')),
                ('view_count', models.PositiveIntegerField(default=0, verbose_name='조회수')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_news', to='User.location', verbose_name='지역')),
            ],
            options={
                'verbose_name': '공공 뉴스',
                'verbose_name_plural': '공공 뉴스들',
                'ordering': ['-is_important', '-published_at'],
            },
        ),
        migrations.CreateModel(
            name='PublicNewsComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='댓글 내용')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_news_comments', to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Board.publicnews', verbose_name='뉴스')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='Board.publicnewscomment', verbose_name='부모 댓글')),
            ],
            options={
                'verbose_name': '공공 뉴스 댓글',
                'verbose_name_plural': '공공 뉴스 댓글들',
                'ordering': ['created_at'],
            },
        ),
        migrations.CreateModel(
            name='PublicNewsLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='좋아요 시간')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='Board.publicnews', verbose_name='뉴스')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='public_news_likes', to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '공공 뉴스 좋아요',
                'verbose_name_plural': '공공 뉴스 좋아요들',
            },
        ),
        migrations.CreateModel(
            name='ReportDataNews',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200, verbose_name='제목')),
                ('content', models.TextField(verbose_name='내용')),
                ('category', models.CharField(choices=[('natural_disaster', '자연재해'), ('accident', '사고'), ('traffic', '교통'), ('security', '치안'), ('facility', '시설 고장'), ('other', '기타')], max_length=20, verbose_name='카테고리')),
                ('is_anonymous', models.BooleanField(default=True, verbose_name='익명 제보')),
                ('is_verified', models.BooleanField(default=False, verbose_name='검증 완료')),
                ('is_urgent', models.BooleanField(default=False, verbose_name='긴급 제보')),
                ('report_count', models.IntegerField(default=0, verbose_name='신고 수')),
                ('image', models.ImageField(blank=True, null=True, upload_to='report_news/', verbose_name='이미지')),
                ('view_count', models.IntegerField(default=0, verbose_name='조회수')),
                ('like_count', models.IntegerField(default=0, verbose_name='좋아요 수')),
                ('comment_count', models.IntegerField(default=0, verbose_name='댓글 수')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.location', verbose_name='지역')),
            ],
            options={
                'verbose_name': '제보 데이터 소식',
                'verbose_name_plural': '제보 데이터 소식',
                'db_table': 'report_data_news',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportDataLike',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='좋아요 시간')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='likes', to='Board.reportdatanews', verbose_name='제보')),
            ],
            options={
                'verbose_name': '제보 좋아요',
                'verbose_name_plural': '제보 좋아요',
                'db_table': 'report_data_likes',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportDataComment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField(verbose_name='댓글 내용')),
                ('is_anonymous', models.BooleanField(default=True, verbose_name='익명 댓글')),
                ('is_active', models.BooleanField(default=True, verbose_name='활성화 여부')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='작성일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='수정일')),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='작성자')),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='replies', to='Board.reportdatacomment', verbose_name='부모 댓글')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='Board.reportdatanews', verbose_name='제보')),
            ],
            options={
                'verbose_name': '제보 댓글',
                'verbose_name_plural': '제보 댓글',
                'db_table': 'report_data_comments',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='ReportDataReport',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(choices=[('false_content', '허위 내용의 글'), ('inappropriate', '부적절한 내용'), ('spam', '스팸/광고'), ('harassment', '욕설/폭력'), ('privacy', '개인정보 노출'), ('other', '기타')], max_length=20, verbose_name='신고 사유')),
                ('description', models.TextField(blank=True, verbose_name='상세 설명')),
                ('status', models.CharField(choices=[('pending', '검토 대기'), ('reviewing', '검토 중'), ('resolved', '처리 완료'), ('rejected', '반려')], default='pending', max_length=20, verbose_name='처리 상태')),
                ('admin_comment', models.TextField(blank=True, verbose_name='관리자 코멘트')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='신고일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='처리일')),
                ('news', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='reports', to='Board.reportdatanews', verbose_name='신고된 제보')),
                ('reporter', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='신고자')),
            ],
            options={
                'verbose_name': '제보 신고',
                'verbose_name_plural': '제보 신고',
                'db_table': 'report_data_reports',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='EventSubscription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('notify_new_events', models.BooleanField(default=True, verbose_name='새 행사 알림')),
                ('notify_reminder', models.BooleanField(default=True, verbose_name='행사 전 알림')),
                ('notify_free_events', models.BooleanField(default=True, verbose_name='무료 행사 알림')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='구독 시작일')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='구독 수정일')),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='User.category', verbose_name='카테고리')),
                ('location', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='User.location', verbose_name='지역')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='사용자')),
            ],
            options={
                'verbose_name': '행사 알림 구독',
                'verbose_name_plural': '행사 알림 구독',
                'db_table': 'event_subscriptions',
                'ordering': ['-created_at'],
                'unique_together': {('user', 'location')},
            },
        ),
        migrations.AddIndex(
            model_name='localevent',
            index=models.Index(fields=['location', 'event_start_date'], name='local_event_locatio_eefbb1_idx'),
        ),
        migrations.AddIndex(
            model_name='localevent',
            index=models.Index(fields=['category', 'is_active'], name='local_event_categor_75dd01_idx'),
        ),
        migrations.AddIndex(
            model_name='localevent',
            index=models.Index(fields=['is_featured', 'is_active'], name='local_event_is_feat_af244d_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='localeventinterest',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='localeventlike',
            unique_together={('event', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='newssubscription',
            unique_together={('user', 'location', 'category')},
        ),
        migrations.AddIndex(
            model_name='publicdatanews',
            index=models.Index(fields=['category', 'location'], name='public_data_categor_20657a_idx'),
        ),
        migrations.AddIndex(
            model_name='publicdatanews',
            index=models.Index(fields=['alert_type', 'sent_at'], name='public_data_alert_t_0f7bf3_idx'),
        ),
        migrations.AddIndex(
            model_name='publicdatanews',
            index=models.Index(fields=['is_active', 'sent_at'], name='public_data_is_acti_61da31_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='publicdatanewsread',
            unique_together={('news', 'user')},
        ),
        migrations.AlterUniqueTogether(
            name='publicnews',
            unique_together={('source', 'external_id')},
        ),
        migrations.AlterUniqueTogether(
            name='publicnewslike',
            unique_together={('news', 'user')},
        ),
        migrations.AddIndex(
            model_name='reportdatanews',
            index=models.Index(fields=['category', 'location'], name='report_data_categor_8fdcbc_idx'),
        ),
        migrations.AddIndex(
            model_name='reportdatanews',
            index=models.Index(fields=['is_urgent', 'created_at'], name='report_data_is_urge_46977b_idx'),
        ),
        migrations.AddIndex(
            model_name='reportdatanews',
            index=models.Index(fields=['is_verified', 'created_at'], name='report_data_is_veri_7b01cd_idx'),
        ),
        migrations.AlterUniqueTogether(
            name='reportdatalike',
            unique_together={('news', 'user')},
        ),
        migrations.AddIndex(
            model_name='reportdatareport',
            index=models.Index(fields=['status', 'created_at'], name='report_data_status_efe353_idx'),
        ),
        migrations.AddIndex(
            model_name='reportdatareport',
            index=models.Index(fields=['news', 'reporter'], name='report_data_news_id_ca3227_idx'),
        ),
    ]
